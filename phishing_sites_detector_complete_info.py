# -*- coding: utf-8 -*-
"""phishing-sites-detector-complete-info.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16FbkKzx17iNba9wqrVzdHsihs1pcFVLy
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 5GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd # use for data manipulation and analysis
import numpy as np # use for multi-dimensional array and matrix

import seaborn as sns # use for high-level interface for drawing attractive and informative statistical graphics
import matplotlib.pyplot as plt # It provides an object-oriented API for embedding plots into applications
# %matplotlib inline

# Loading the dataset
phish_data = pd.read_csv('/kaggle/input/phishing-site-urls/phishing_site_urls.csv')

phish_data.head()

phish_data.info()

phish_data.isnull().sum() # there is no missing values

#create a dataframe of classes counts
label_counts = pd.DataFrame(phish_data.Label.value_counts())

import plotly.express as px
#visualizing target_col
fig = px.bar(label_counts, x=label_counts.index, y=label_counts.Label)
fig.show()

"""**Pre processing**"""



from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer

# Replace "Label" column with 0s and 1s
phish_data['Label'] = phish_data['Label'].apply(lambda x: 1 if x == 'good' else 0)

X = phish_data['URL']
y = phish_data['Label']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)

# Initialize TF-IDF vectorizer
tfidf = TfidfVectorizer(max_features=4000)  # You can adjust max_features

# Fit and transform the training data
X_train= tfidf.fit_transform(X_train)

# Transform the testing data
X_test = tfidf.transform(X_test)

"""**Model training**"""

from sklearn.svm import SVC
from sklearn import tree
clf = tree.DecisionTreeClassifier(random_state=22)

clf.fit(X_train, y_train)

"""**Model Evaluation**"""

from sklearn.metrics import accuracy_score, classification_report,accuracy_score, confusion_matrix


y_pred = clf.predict(X_test)
train_accuracy = accuracy_score(y_test, y_pred)
print(train_accuracy)
classification_rep = classification_report(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(conf_matrix)
print("Classification Report:")
print(classification_rep)